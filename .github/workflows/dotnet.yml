# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:

    PROJECT_PATH: .
    APP_NAME: YT2MP3Sharp-Avalonia

    CHECK_TAG_EXISTENCE_BEFORE_CREATING_TAG: false
    PUBLISH_OUTPUT_FOLDER: bin
    PUBLISH_SELF_CONTAINED: false
    PUBLISH_SINGLE_FILE: false
    PUBLISH_READY_TO_RUN: false
    PUBLISH_AOT: false
    PUBLISH_TRIMMED: false
    PUBLISH_TRIM_MODE: partial # or full
    IS_PRE_RELEASE: false
    SKIP_IF_RELEASE_EXIST: true
    MAKE_LATEST: true
    ALLOW_UPDATES: false
    ARTIFACT_ERRORS_FAIL_BUILD: false

jobs:
  build:

    runs-on: windows-latest

    outputs:
        app-version: ${{ steps.get_version.outputs.version }}
        IS_PRE_RELEASE: ${{ env.IS_PRE_RELEASE }}
    strategy:
      matrix:
        platform: [x64, x86]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - uses: actions/setup-dotnet@v4
      with:
       dotnet-version: | 
         8.0.x

    - uses: kzrnm/get-net-sdk-project-versions-action@v2
      id: get-version
      with:
        proj-path: ${{ env.PROJECT_PATH }}\
    - run: |
        $runtimeIdentifier = "${{ matrix.platform }}"
        dotnet publish ${{ env.PROJECT_PATH }} -c Release -r win-$($runtimeIdentifier.ToLower()) /p:GITHUB_ACTIONS=true -p:Platform=${{ matrix.platform }} --self-contained ${{ env.PUBLISH_SELF_CONTAINED }} -p:PublishSingleFile=${{ env.PUBLISH_SINGLE_FILE }} -p:PublishReadyToRun=${{ env.PUBLISH_READY_TO_RUN }} -p:PublishTrimmed=${{ env.PUBLISH_TRIMMED }} -p:TrimMode=${{ env.PUBLISH_TRIM_MODE }} -p:PublishAot=${{ env.PUBLISH_AOT }} --output ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}
     # Zipping folder and all files
    - uses: vimtor/action-zip@v1.2
      with:
        files: ${{ env.PUBLISH_OUTPUT_FOLDER }}/${{ matrix.platform }}
        recursive: true
        dest: ${{ env.APP_NAME }}-v${{ steps.get-version.outputs.version }}-${{ matrix.platform }}.zip
    - uses: actions/upload-artifact@v4
      with:
        name: artifacts-${{ matrix.platform }}
        path: ${{ env.APP_NAME }}-v${{ steps.get-version.outputs.version }}-${{ matrix.platform }}.zip
    - run: |
        # Define the list of strings
        $list = @("beta", "alpha", "preview", "experiment")

        # Define the suffix variable
        $suffix = "${{ steps.get-version.outputs.version-suffix }}"

        foreach ($item in $list) {
          # Convert both strings to lower case for case-insensitive comparison
          if ($suffix.ToLower().StartsWith($item.ToLower())) {
            echo "IS_PRE_RELEASE=true" >> $env:GITHUB_ENV
            break
          }
        }
  release:
    needs: build
    runs-on: ubuntu-latest
    env:
      # Read some variables from the 'build' job
      APP_VERSION: ${{ needs.build.outputs.app-version }}
      IS_PRE_RELEASE: ${{ needs.build.outputs.IS_PRE_RELEASE }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Downloading all zip files into the GitHub root directory (uploaded in 'build' job)
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      # Configuring git to create a tag
      - run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"

          TAG_NAME="v${{ env.APP_VERSION }}"
          if [[ "${{ env.CHECK_TAG_EXISTENCE_BEFORE_CREATING_TAG }}" == "true" ]]; then
              git fetch --tags
              if [[ $(git tag -l "$TAG_NAME") ]]; then
                  echo "Tag found (already exist). Skipping to the next step"
              else
                  echo "Tag not found, creating new tag"
                  git tag "$TAG_NAME"
                  git push origin "$TAG_NAME"
              fi
          else
              echo "Creating new tag"
              git tag "$TAG_NAME"
              git push origin "$TAG_NAME"
          fi  
          
      # Installing a package for generating a changelog file
      - run: npm install -g auto-changelog  
      - run: auto-changelog --tag-pattern .+ --commit-limit false --starting-version v${{ env.APP_VERSION }} --ending-version v${{ env.APP_VERSION }} --hide-credit  
      
      # Creating a Release in GitHub
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ env.APP_NAME }}-v${{ env.APP_VERSION }}-*.zip"
          bodyFile: "CHANGELOG.md"
          name: v${{ env.APP_VERSION }}
          tag: v${{ env.APP_VERSION }}
          prerelease: ${{ env.IS_PRE_RELEASE }}
          skipIfReleaseExists: ${{ env.SKIP_IF_RELEASE_EXIST }}
          makeLatest: ${{ env.MAKE_LATEST }}
          allowUpdates: ${{ env.ALLOW_UPDATES }}
          artifactErrorsFailBuild: ${{ env.ARTIFACT_ERRORS_FAIL_BUILD }}
